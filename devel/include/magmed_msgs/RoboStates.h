// Generated by gencpp from file magmed_msgs/RoboStates.msg
// DO NOT EDIT!


#ifndef MAGMED_MSGS_MESSAGE_ROBOSTATES_H
#define MAGMED_MSGS_MESSAGE_ROBOSTATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace magmed_msgs
{
template <class ContainerAllocator>
struct RoboStates_
{
  typedef RoboStates_<ContainerAllocator> Type;

  RoboStates_()
    : VAL(0)  {
    }
  RoboStates_(const ContainerAllocator& _alloc)
    : VAL(0)  {
  (void)_alloc;
    }



   typedef int32_t _VAL_type;
  _VAL_type VAL;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INIT)
  #undef INIT
#endif
#if defined(_WIN32) && defined(RUN)
  #undef RUN
#endif
#if defined(_WIN32) && defined(TERM)
  #undef TERM
#endif

  enum {
    INIT = 0,
    RUN = 1,
    TERM = -1,
  };


  typedef boost::shared_ptr< ::magmed_msgs::RoboStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::magmed_msgs::RoboStates_<ContainerAllocator> const> ConstPtr;

}; // struct RoboStates_

typedef ::magmed_msgs::RoboStates_<std::allocator<void> > RoboStates;

typedef boost::shared_ptr< ::magmed_msgs::RoboStates > RoboStatesPtr;
typedef boost::shared_ptr< ::magmed_msgs::RoboStates const> RoboStatesConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::magmed_msgs::RoboStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::magmed_msgs::RoboStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::magmed_msgs::RoboStates_<ContainerAllocator1> & lhs, const ::magmed_msgs::RoboStates_<ContainerAllocator2> & rhs)
{
  return lhs.VAL == rhs.VAL;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::magmed_msgs::RoboStates_<ContainerAllocator1> & lhs, const ::magmed_msgs::RoboStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace magmed_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::magmed_msgs::RoboStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::magmed_msgs::RoboStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::magmed_msgs::RoboStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::magmed_msgs::RoboStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::magmed_msgs::RoboStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::magmed_msgs::RoboStates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::magmed_msgs::RoboStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f7db48bba6b67d991a886a8d887cb31";
  }

  static const char* value(const ::magmed_msgs::RoboStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f7db48bba6b67d9ULL;
  static const uint64_t static_value2 = 0x91a886a8d887cb31ULL;
};

template<class ContainerAllocator>
struct DataType< ::magmed_msgs::RoboStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "magmed_msgs/RoboStates";
  }

  static const char* value(const ::magmed_msgs::RoboStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::magmed_msgs::RoboStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32  INIT = 0    # 初始化状态\n"
"int32  RUN = 1  # 运行状态\n"
"int32  TERM = -1    # 终止状态\n"
"int32 VAL\n"
;
  }

  static const char* value(const ::magmed_msgs::RoboStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::magmed_msgs::RoboStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VAL);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoboStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::magmed_msgs::RoboStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::magmed_msgs::RoboStates_<ContainerAllocator>& v)
  {
    s << indent << "VAL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VAL);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAGMED_MSGS_MESSAGE_ROBOSTATES_H
