// Generated by gencpp from file magmed_msgs/MagCR.msg
// DO NOT EDIT!


#ifndef MAGMED_MSGS_MESSAGE_MAGCR_H
#define MAGMED_MSGS_MESSAGE_MAGCR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Pose.h>

namespace magmed_msgs
{
template <class ContainerAllocator>
struct MagCR_
{
  typedef MagCR_<ContainerAllocator> Type;

  MagCR_()
    : header()
    , phi_mock(0.0)
    , thetaL_mock(0.0)
    , phi_msr(0.0)
    , thetaL_msr(0.0)
    , tipPoint()
    , Tsg()  {
    }
  MagCR_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , phi_mock(0.0)
    , thetaL_mock(0.0)
    , phi_msr(0.0)
    , thetaL_msr(0.0)
    , tipPoint(_alloc)
    , Tsg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _phi_mock_type;
  _phi_mock_type phi_mock;

   typedef double _thetaL_mock_type;
  _thetaL_mock_type thetaL_mock;

   typedef double _phi_msr_type;
  _phi_msr_type phi_msr;

   typedef double _thetaL_msr_type;
  _thetaL_msr_type thetaL_msr;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _tipPoint_type;
  _tipPoint_type tipPoint;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _Tsg_type;
  _Tsg_type Tsg;





  typedef boost::shared_ptr< ::magmed_msgs::MagCR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::magmed_msgs::MagCR_<ContainerAllocator> const> ConstPtr;

}; // struct MagCR_

typedef ::magmed_msgs::MagCR_<std::allocator<void> > MagCR;

typedef boost::shared_ptr< ::magmed_msgs::MagCR > MagCRPtr;
typedef boost::shared_ptr< ::magmed_msgs::MagCR const> MagCRConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::magmed_msgs::MagCR_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::magmed_msgs::MagCR_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::magmed_msgs::MagCR_<ContainerAllocator1> & lhs, const ::magmed_msgs::MagCR_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.phi_mock == rhs.phi_mock &&
    lhs.thetaL_mock == rhs.thetaL_mock &&
    lhs.phi_msr == rhs.phi_msr &&
    lhs.thetaL_msr == rhs.thetaL_msr &&
    lhs.tipPoint == rhs.tipPoint &&
    lhs.Tsg == rhs.Tsg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::magmed_msgs::MagCR_<ContainerAllocator1> & lhs, const ::magmed_msgs::MagCR_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace magmed_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::magmed_msgs::MagCR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::magmed_msgs::MagCR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::magmed_msgs::MagCR_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::magmed_msgs::MagCR_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::magmed_msgs::MagCR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::magmed_msgs::MagCR_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::magmed_msgs::MagCR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2b6af8e88cbe5faeaf2769acfe589ea";
  }

  static const char* value(const ::magmed_msgs::MagCR_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2b6af8e88cbe5faULL;
  static const uint64_t static_value2 = 0xeaf2769acfe589eaULL;
};

template<class ContainerAllocator>
struct DataType< ::magmed_msgs::MagCR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "magmed_msgs/MagCR";
  }

  static const char* value(const ::magmed_msgs::MagCR_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::magmed_msgs::MagCR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float64 phi_mock\n"
"float64 thetaL_mock\n"
"float64 phi_msr\n"
"float64 thetaL_msr\n"
"geometry_msgs/Point tipPoint\n"
"geometry_msgs/Pose Tsg\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::magmed_msgs::MagCR_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::magmed_msgs::MagCR_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.phi_mock);
      stream.next(m.thetaL_mock);
      stream.next(m.phi_msr);
      stream.next(m.thetaL_msr);
      stream.next(m.tipPoint);
      stream.next(m.Tsg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MagCR_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::magmed_msgs::MagCR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::magmed_msgs::MagCR_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "phi_mock: ";
    Printer<double>::stream(s, indent + "  ", v.phi_mock);
    s << indent << "thetaL_mock: ";
    Printer<double>::stream(s, indent + "  ", v.thetaL_mock);
    s << indent << "phi_msr: ";
    Printer<double>::stream(s, indent + "  ", v.phi_msr);
    s << indent << "thetaL_msr: ";
    Printer<double>::stream(s, indent + "  ", v.thetaL_msr);
    s << indent << "tipPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.tipPoint);
    s << indent << "Tsg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.Tsg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAGMED_MSGS_MESSAGE_MAGCR_H
