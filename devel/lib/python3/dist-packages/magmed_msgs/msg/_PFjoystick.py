# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from magmed_msgs/PFjoystick.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PFjoystick(genpy.Message):
  _md5sum = "c1b2838b51e4cc36d6636da93093d28d"
  _type = "magmed_msgs/PFjoystick"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header              # ROS standard header

float32[3] nJOY1             # Three axes of the big joystick
float32[2] nJOY2             # Two axes of the first (left) small joystick
float32[2] nJOY3             # Two axes of the second (right) small joystick
bool bJOYD                 # Big joystick button
uint16 POTA                # Potentiometer A
uint16 POTB                # Potentiometer B
int32 BANA                 # Rotary switch A
int32 BANB                 # Rotary switch B
int16 ENCA                 # Encoder A
int16 ENCB                 # Encoder B
bool[5] TOG                # Toggle switches (5 in total)
bool[6] BUT                # Push buttons (6 in total)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','nJOY1','nJOY2','nJOY3','bJOYD','POTA','POTB','BANA','BANB','ENCA','ENCB','TOG','BUT']
  _slot_types = ['std_msgs/Header','float32[3]','float32[2]','float32[2]','bool','uint16','uint16','int32','int32','int16','int16','bool[5]','bool[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,nJOY1,nJOY2,nJOY3,bJOYD,POTA,POTB,BANA,BANB,ENCA,ENCB,TOG,BUT

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PFjoystick, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nJOY1 is None:
        self.nJOY1 = [0.] * 3
      if self.nJOY2 is None:
        self.nJOY2 = [0.] * 2
      if self.nJOY3 is None:
        self.nJOY3 = [0.] * 2
      if self.bJOYD is None:
        self.bJOYD = False
      if self.POTA is None:
        self.POTA = 0
      if self.POTB is None:
        self.POTB = 0
      if self.BANA is None:
        self.BANA = 0
      if self.BANB is None:
        self.BANB = 0
      if self.ENCA is None:
        self.ENCA = 0
      if self.ENCB is None:
        self.ENCB = 0
      if self.TOG is None:
        self.TOG = [False] * 5
      if self.BUT is None:
        self.BUT = [False] * 6
    else:
      self.header = std_msgs.msg.Header()
      self.nJOY1 = [0.] * 3
      self.nJOY2 = [0.] * 2
      self.nJOY3 = [0.] * 2
      self.bJOYD = False
      self.POTA = 0
      self.POTB = 0
      self.BANA = 0
      self.BANB = 0
      self.ENCA = 0
      self.ENCB = 0
      self.TOG = [False] * 5
      self.BUT = [False] * 6

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3f().pack(*self.nJOY1))
      buff.write(_get_struct_2f().pack(*self.nJOY2))
      buff.write(_get_struct_2f().pack(*self.nJOY3))
      _x = self
      buff.write(_get_struct_B2H2i2h().pack(_x.bJOYD, _x.POTA, _x.POTB, _x.BANA, _x.BANB, _x.ENCA, _x.ENCB))
      buff.write(_get_struct_5B().pack(*self.TOG))
      buff.write(_get_struct_6B().pack(*self.BUT))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 12
      self.nJOY1 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 8
      self.nJOY2 = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 8
      self.nJOY3 = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.bJOYD, _x.POTA, _x.POTB, _x.BANA, _x.BANB, _x.ENCA, _x.ENCB,) = _get_struct_B2H2i2h().unpack(str[start:end])
      self.bJOYD = bool(self.bJOYD)
      start = end
      end += 5
      self.TOG = _get_struct_5B().unpack(str[start:end])
      self.TOG = list(map(bool, self.TOG))
      start = end
      end += 6
      self.BUT = _get_struct_6B().unpack(str[start:end])
      self.BUT = list(map(bool, self.BUT))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.nJOY1.tostring())
      buff.write(self.nJOY2.tostring())
      buff.write(self.nJOY3.tostring())
      _x = self
      buff.write(_get_struct_B2H2i2h().pack(_x.bJOYD, _x.POTA, _x.POTB, _x.BANA, _x.BANB, _x.ENCA, _x.ENCB))
      buff.write(self.TOG.tostring())
      buff.write(self.BUT.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 12
      self.nJOY1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 8
      self.nJOY2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      self.nJOY3 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 17
      (_x.bJOYD, _x.POTA, _x.POTB, _x.BANA, _x.BANB, _x.ENCA, _x.ENCB,) = _get_struct_B2H2i2h().unpack(str[start:end])
      self.bJOYD = bool(self.bJOYD)
      start = end
      end += 5
      self.TOG = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=5)
      self.TOG = list(map(bool, self.TOG))
      start = end
      end += 6
      self.BUT = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=6)
      self.BUT = list(map(bool, self.BUT))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_B2H2i2h = None
def _get_struct_B2H2i2h():
    global _struct_B2H2i2h
    if _struct_B2H2i2h is None:
        _struct_B2H2i2h = struct.Struct("<B2H2i2h")
    return _struct_B2H2i2h
